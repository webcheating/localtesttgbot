from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils import markdown as md
from aiogram.types import ParseMode
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.markdown import link

from settings import markups as nav

from create_bot import dp, bot
import database
from datetime import datetime
from datetime import timedelta
import googlemaps

from settings.config import api_key_google

gmaps = googlemaps.Client(key=api_key_google)
db = database.DBCommands()

class Applications(StatesGroup):
	waiting_for_respons = State()

# @dp.message_handler(commands=['start'])
async def command_identity(message: types.Message):
	try:

		check_user = await db.get_user_status(message.from_user.id)

		if check_user == None:
			await bot.send_photo(message.from_user.id, photo = open('imgs/welcome.jpg', 'rb'), caption=f'üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è –±–æ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫!', reply_markup=nav.identity)

			set_sub = database.Subscriptions(user_id=message.from_user.id, amount=0)
			await set_sub.create()
		else:
			await bot.send_photo(message.from_user.id, photo = open('imgs/welcome.jpg', 'rb'), caption=f'üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}, —è –±–æ—Ç –¥–ª—è –∑–∞—è–≤–æ–∫!')

			if check_user.status == 'passenger':

				await bot.send_message(message.from_user.id, f"‚úÖ –í—ã –±—ã–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {md.bold('–ø–∞—Å—Å–∞–∂–∏—Ä')}!")
				await bot.send_message(message.from_user.id, f"üñ• –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {md.bold('–º–µ–Ω—é')}", reply_markup=nav.mainKeyboardMenu)

			elif check_user.status == 'driver':

				await bot.send_message(message.from_user.id, f"‚úÖ –í—ã –±—ã–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {md.bold('–≤–æ–¥–∏—Ç–µ–ª—å')}!")
				await bot.send_message(message.from_user.id, f"üñ• –í—ã–±–µ—Ä–∏—Ç–µ {md.bold('–º–µ–Ω—é')} –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º", reply_markup=nav.mainKeyboardMenu)

			else:
				await bot.send_message(message.from_user.id, '[INFO] Error, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ –ø–æ–≤–æ–¥—É –æ—à–∏–±–∫–∏ —Å @w4xdwhyduwy')
			
	except Exception as _ex:
		print(_ex)
		await message.reply('–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É - –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É:\nt.me/kachger_bot ')




async def number_of_applications(call: types.CallbackQuery):
	await bot.delete_message(call.from_user.id, call.message.message_id)

	user_status	= await	db.get_user_status(call.from_user.id)
	global accepted_applications
	accepted_applications = []
	global filters
	filters = await db.filtration(call.from_user.id, user_status.status)

	await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {md.bold(len(filters))}')

	passenger = await db.get_user_info(filters[0], 'passenger')

	date = datetime.strftime(passenger.date, "%d/%m/%Y")

	full_time_and_date = datetime.combine(passenger.date, passenger.time)

	now = datetime.now()
	directions_result = gmaps.distance_matrix(passenger.departure,
                                    passenger.arrival,
                                    mode="driving",
                                    avoid="ferries",
                                    departure_time=now
                                   )

	duration = str(directions_result['rows'][0]['elements'][0]['duration']['text'])
	parts = duration.split(' ')
	duration = int(parts[0])

	proposed_time = full_time_and_date - timedelta(hours=duration)
	proposed_time = datetime.strftime(proposed_time, '%d.%m.%Y %H:%M')

	await Applications.waiting_for_respons.set()
	await bot.send_message(call.from_user.id, f"üöó –ü–æ–µ–∑–¥–∫–∞: {passenger.departure} - {passenger.arrival}\n\n–°–≤—è–∑—å: {passenger.relation}\n\n–ù–∞–¥–æ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {md.bold(date)} –≤ {md.bold(passenger.time)}\n\n–ü–æ–µ–∑–¥–∫–∞ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {duration}—á.\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: {proposed_time}", reply_markup=nav.ChooseApplication)

async def command_accept(call: types.CallbackQuery, state: FSMContext):

	user_status	= await	db.get_user_status(call.from_user.id)
	global filters

	if call.data == 'appAccept':
		accepted_applications.append(filters[0])
	elif call.data == 'appRefuse':
		pass
	else:
		await bot.send_message(call.from_user.id, f'–ù–µ–∏–∑–≤–µ—Å—Ç–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –º–µ–Ω—é')

	try:

		filters.pop(0)
		passenger = await db.get_user_info(filters[0], 'passenger')

		date = datetime.strftime(passenger.date, "%d/%m/%Y")

		full_time_and_date = datetime.combine(passenger.date, passenger.time)
		date_and_time = datetime.strftime(full_time_and_date, '%d.%m.%Y %H:%M')

		now = datetime.now()
		directions_result = gmaps.distance_matrix(passenger.departure,
                                    	passenger.arrival,
                                    	mode="driving",
                                    	avoid="ferries",
                                    	departure_time=now
                                   	)

		duration = str(directions_result['rows'][0]['elements'][0]['duration']['text'])
		parts = duration.split(' ')
		duration = int(parts[0])

		proposed_time = full_time_and_date - timedelta(hours=duration)
		proposed_time = datetime.strftime(proposed_time, '%d.%m.%Y %H:%M')

		await bot.delete_message(call.from_user.id, call.message.message_id)
		await Applications.waiting_for_respons.set()
		await bot.send_message(call.from_user.id, f"üöó –ü–æ–µ–∑–¥–∫–∞: {passenger.departure} - {passenger.arrival}\n\n–°–≤—è–∑—å: {passenger.relation}\n\n–ù–∞–¥–æ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {md.bold(date)} –≤ {md.bold(passenger.time)}\n\n–ü–æ–µ–∑–¥–∫–∞ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {duration}—á.\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: {proposed_time}", reply_markup=nav.ChooseApplication)
	except:
		await bot.delete_message(call.from_user.id, call.message.message_id)
		await state.finish()

async def send_accepted_applications(message: types.Message):
	await bot.send_message(message.from_user.id, accepted_applications)


# async def choose_applications(call: types.CallbackQuery):
# 	if call.data == 'appShow':

# 		await bot.delete_message(call.from_user.id, call.message.message_id)

# 		user_status	= await	db.get_user_status(call.from_user.id)
# 		filters = await db.filtration(call.from_user.id, user_status.status)

# 		await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {md.bold(len(filters))}')

# 		filters = await db.filtration(call.from_user.id, user_status.status)

# 		accepted_applications = []

# 		for passenger in filters:

# 			client = await db.get_user_info(passenger, 'passenger')


# 			full_time_and_date = datetime.combine(client.date, client.time)
# 			proposed_time = full_time_and_date - timedelta(hours=12)
# 			proposed_time = datetime.strftime(proposed_time, '%d.%m.%Y %H:%M')
# 			date_and_time = datetime.strftime(full_time_and_date, '%d.%m.%Y %H:%M')

# 			await bot.send_message(call.from_user.id, f"üöó –ü–æ–µ–∑–¥–∫–∞: {client.departure} - {client.arrival}\n\n–°–≤—è–∑—å: {client.relation}\n\n–ù–∞–¥–æ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤: {date_and_time}", reply_markup=nav.ChooseApplication)
			
# 			if call.data == 'appAccept':
# 				accepted_applications = []
# 				accepted_applications.append
# 			elif call.data == 'appRefuse':
# 				pass
# 			#await bot.send_message(call.from_user.id, f"–ü–æ–µ–∑–¥–∫–∞: {client.departure} - {client.arrival}\n\n–î–∞—Ç–∞: {client.date}\n\n–í—Ä–µ–º—è: {client.time}\n\n–°–≤—è–∑—å: {client.relation}")
# 		await bot.send_message(call.from_user.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {accepted_applications}')


def register_handlers_other(dp:Dispatcher):
	dp.register_message_handler(command_identity, commands='start')
	# dp.register_callback_query_handler(number_of_applications, text='sendPassengers', state="*")
	# dp.register_callback_query_handler(command_accept, text_contains='app', state=Applications.waiting_for_respons)
	# dp.register_message_handler(send_accepted_applications, commands='show')
	
	# dp.register_callback_query_handler(choose_applications, text_contains='app')