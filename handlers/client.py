from aiogram import Bot, Dispatcher, executor, types

import logging
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import markdown as md
from aiogram.types import ParseMode

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.types.message import ContentType

from settings import markups as nav

from create_bot import dp, bot

from settings import config as cfg

from datetime import datetime
import database

from datetime import timedelta
import googlemaps

from settings.config import api_key_google

db = database.DBCommands()

active_req = '1'
gmaps = googlemaps.Client(key=api_key_google)
pay_token = '1744374395:TEST:67a61a650f94c99766e0'

class Applications(StatesGroup):
	waiting_for_respons = State()

class Form(StatesGroup):
    departure = State()
    arrival = State()
    people = State()
    relation = State()
    date = State()
    time = State()
    response = State()

async def buttons(message: types.Message):
	if message.chat.type == 'private':
		if message.text == 'üñ• –ú–µ–Ω—é':

			user_status = await db.get_user_status(message.from_user.id)

			if user_status.status == 'passenger':
				await bot.send_photo(message.from_user.id, photo = open('imgs/menu.jpg', 'rb'), caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=nav.mainMenu)
			if user_status.status == 'driver':
				await bot.send_photo(message.from_user.id, photo = open('imgs/menu.jpg', 'rb'), caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=nav.mainMenuForDrivers)


		if message.text == 'üì± –ß–∞—Ç':
			await bot.send_message(message.from_user.id, '*—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç*')
		if message.text == 'üë§ –í–ª–∞–¥–µ–ª–µ—Ü':
			await bot.send_message(message.from_user.id, '*—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞*')


async def set_status(call: types.CallbackQuery):
	if call.data == 'setPassenger':

		await call.message.edit_reply_markup()
		identity = await db.identity_user(call.from_user.id, 'passenger')

		check_application = await db.get_application_info(call.from_user.id, 'driver')
		if check_application != None:
			delete_application = await db.delete_application(call.from_user.id, 'driver')


		await bot.send_message(call.from_user.id, f"‚úÖ –í—ã –±—ã–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {md.bold('–ø–∞—Å—Å–∞–∂–∏—Ä')}!")
		await bot.send_message(call.from_user.id, f"üñ• –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {md.bold('–º–µ–Ω—é')}", reply_markup=nav.mainKeyboardMenu)

	elif call.data == 'setDriver':

		await call.message.edit_reply_markup()
		identity = await db.identity_user(call.from_user.id, 'driver')

		check_application = await db.get_application_info(call.from_user.id, 'passenger')
		if check_application != None:
			delete_application = await db.delete_application(call.from_user.id, 'passenger')

		await bot.send_message(call.from_user.id, f"‚úÖ –í—ã –±—ã–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {md.bold('–≤–æ–¥–∏—Ç–µ–ª—å')}!")
		await bot.send_message(call.from_user.id, f"üñ• –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {md.bold('–º–µ–Ω—é')}", reply_markup=nav.mainKeyboardMenu)


async def main_menu(call: types.CallbackQuery):
	if call.data == 'sendReq':
		user_status = await db.get_user_status(call.from_user.id)

		if user_status.status == 'passenger':
			try:

				check_user = await db.get_application_info(call.from_user.id, user_status.status)

				if check_user != None:
					await bot.delete_message(call.from_user.id, call.message.message_id)
					await bot.send_message(call.from_user.id, '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É!', reply_markup=nav.applicationBack)
				else:
					await Form.departure.set()
					await bot.delete_message(call.from_user.id, call.message.message_id)
					await bot.send_message(call.from_user.id, "‚úàÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())

			except Exception as _ex:
				print('[INFO]', _ex)

		elif user_status.status == 'driver':
			try:

				check_user = await db.get_application_info(call.from_user.id, user_status.status)

				if check_user != None:
					await bot.delete_message(call.from_user.id, call.message.message_id)
					await bot.send_message(call.from_user.id, '–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É!', reply_markup=nav.applicationBack)
				else:
					await Form.departure.set()
					await bot.delete_message(call.from_user.id, call.message.message_id)
					await bot.send_message(call.from_user.id, "‚úàÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=types.ReplyKeyboardRemove())

			except Exception as _ex:
				print('[INFO]', _ex)


	elif call.data == 'sendProfile':

		user_status = await db.get_user_status(call.from_user.id)

		sub_status = await database.Subscriptions.query.where(database.Subscriptions.user_id == call.from_user.id).gino.first()

		await bot.delete_message(call.from_user.id, call.message.message_id)
		await bot.send_photo(call.from_user.id, photo = open('imgs/info.jpg', 'rb'), caption=f"üÜî {md.bold('–í–∞—à id:')} {call.from_user.id}\n\nüßëüèª‚Äçüîß {md.bold('–í–∞—à –ª–æ–≥–∏–Ω:')} {md.code(call.from_user.username)}\n\nüìñ {md.bold('–í–∞—à —Å—Ç–∞—Ç—É—Å:')} {user_status.status}\n\nüîñ {md.bold('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:')} {sub_status.amount}", reply_markup=nav.profile)

		# else:
		# 	await bot.send_message(message.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫!')


	elif call.data == 'sendSubscriptions':
		sub_status = await database.Subscriptions.query.where(database.Subscriptions.user_id == call.from_user.id).gino.first()

		if sub_status.amount > 0:
			await bot.delete_message(call.from_user.id, call.message.message_id)

			user_status	= await	db.get_user_status(call.from_user.id)
			global filters
			filters = await db.filtration(call.from_user.id, user_status.status)

			global abc
			abc = await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {md.bold(len(filters))}')

			passenger = await db.get_user_info(filters[0], 'passenger')

			date = datetime.strftime(passenger.date, "%d/%m/%Y")

			full_time_and_date = datetime.combine(passenger.date, passenger.time)

			now = datetime.now()
			directions_result = gmaps.distance_matrix(passenger.departure,
		                                    passenger.arrival,
		                                    mode="driving",
		                                    avoid="ferries",
		                                    departure_time=now
		                                   )

			duration = str(directions_result['rows'][0]['elements'][0]['duration']['text'])
			parts = duration.split(' ')
			duration = int(parts[0])

			proposed_time = full_time_and_date - timedelta(hours=duration)
			proposed_time = datetime.strftime(proposed_time, '%d.%m.%Y %H:%M')

			await Applications.waiting_for_respons.set()
			await bot.send_message(call.from_user.id, f"üöó –ü–æ–µ–∑–¥–∫–∞: {passenger.departure} - {passenger.arrival}\n\n–°–≤—è–∑—å: {passenger.relation}\n\n–ù–∞–¥–æ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {md.bold(date)} –≤ {md.bold(passenger.time)}\n\n–ü–æ–µ–∑–¥–∫–∞ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {duration}—á.\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: {proposed_time}", reply_markup=nav.ChooseApplication)

		elif sub_status.amount == 0:
			await bot.delete_message(call.from_user.id, call.message.message_id)
			items = await db.show_items()
			all_items_menu = await nav.create_items_menu()

			if len(items) == 1:
				await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω {md.bold(len(items))} —Ç–æ–≤–∞—Ä', reply_markup=all_items_menu[1])
			elif len(items) > 1 and len(items) < 5:
				await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ {md.bold(len(items))} —Ç–æ–≤–∞—Ä–∞', reply_markup=all_items_menu[1])
			elif len(items) > 5:
				await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ {md.bold(len(items))} —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=all_items_menu[1])
			else:
				await bot.send_message(call.from_user.id, f'–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç', reply_markup=all_items_menu[1])
		else:
			await bot.send_message(call.from_user.id, '‚ùå –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @w4xdwhyduwy)', reply_markup = nav.mainKeyboardMenu)

async def command_accept(call: types.CallbackQuery, state: FSMContext):

	user_status	= await	db.get_user_status(call.from_user.id)
	global filters

	if call.data == 'appAccept':
		set_sub = await database.Subscriptions.query.where(database.Subscriptions.user_id == call.from_user.id).gino.first()
		await set_sub.update(amount=set_sub.amount-1).apply()
		driver_contact = await db.get_application_info(call.from_user.id, user_status.status)
		passenger = await db.get_user_info(filters[0], 'passenger')
		await passenger.update(driver=call.from_user.id).apply()

		await bot.send_message(filters[0], f'‚ùóÔ∏è {md.bold("–í–∞—à—É –∑–∞—è–≤–∫—É –ø—Ä–∏–Ω—è–ª –≤–æ–¥–∏—Ç–µ–ª—å")} ‚ùóÔ∏è\n\n‚òéÔ∏è {md.bold("–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–≤—è–∑–∏")}: {md.code(driver_contact.relation)}')

		# accepted_applications.append(filters[0])
	elif call.data == 'appRefuse':
		pass
	else:
		await bot.send_message(call.from_user.id, f'–ù–µ–∏–∑–≤–µ—Å—Ç–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –º–µ–Ω—é')

	try:

		filters.pop(0)
		passenger = await db.get_user_info(filters[0], 'passenger')

		date = datetime.strftime(passenger.date, "%d/%m/%Y")

		full_time_and_date = datetime.combine(passenger.date, passenger.time)
		date_and_time = datetime.strftime(full_time_and_date, '%d.%m.%Y %H:%M')

		now = datetime.now()
		directions_result = gmaps.distance_matrix(passenger.departure,
                                    	passenger.arrival,
                                    	mode="driving",
                                    	avoid="ferries",
                                    	departure_time=now
                                   	)

		duration = str(directions_result['rows'][0]['elements'][0]['duration']['text'])
		parts = duration.split(' ')
		duration = int(parts[0])

		proposed_time = full_time_and_date - timedelta(hours=duration)
		proposed_time = datetime.strftime(proposed_time, '%d.%m.%Y %H:%M')

		await bot.delete_message(call.from_user.id, call.message.message_id)
		await Applications.waiting_for_respons.set()
		await bot.send_message(call.from_user.id, f"üöó –ü–æ–µ–∑–¥–∫–∞: {passenger.departure} - {passenger.arrival}\n\n–°–≤—è–∑—å: {passenger.relation}\n\n–ù–∞–¥–æ –±—ã—Ç—å –≤ –º–µ—Å—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è {md.bold(date)} –≤ {md.bold(passenger.time)}\n\n–ü–æ–µ–∑–¥–∫–∞ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {duration}—á.\n\n–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞: {proposed_time}", reply_markup=nav.ChooseApplication)
	except:
		await bot.delete_message(call.from_user.id, abc.message_id)
		await bot.delete_message(call.from_user.id, call.message.message_id)

		await bot.send_message(call.from_user.id, f'{md.bold("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥—Ä—É–≥–∏—Ö –∑–∞—è–≤–æ–∫ –ø–æ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É")}')
		await state.finish()

async def profile_operations(call: types.CallbackQuery):

	if call.data == 'showApp':

		try:

			user_status = await db.get_user_status(call.from_user.id)
			get_passenger = await db.get_user_info(call.from_user.id, user_status.status)

			if get_passenger != None:
				date = datetime.strftime(get_passenger.date, '%d/%m/%Y')

				await bot.delete_message(call.from_user.id, call.message.message_id)
				await bot.send_message(call.from_user.id, f"üìù {md.bold('–í–∞—à–∞ –∑–∞—è–≤–∫–∞')}\n\n1Ô∏è‚É£ {md.bold('–ü–æ–µ–∑–¥–∫–∞')}:   {get_passenger.departure} - {get_passenger.arrival}\n\n2Ô∏è‚É£ {md.bold('–ö–æ–ª/–≤–æ —á–µ–ª–æ–≤–µ–∫')}:   {get_passenger.people}\n\n3Ô∏è‚É£ {md.bold('–°–≤—è–∑—å')}:   {md.code(get_passenger.relation)}\n\n4Ô∏è‚É£ {md.bold('–î–∞—Ç–∞')}:   {date}\n\n5Ô∏è‚É£ {md.bold('–í—Ä–µ–º—è')}:   {get_passenger.time}", reply_markup=nav.request)
			else:
				await bot.delete_message(call.from_user.id, call.message.message_id)
				await bot.send_message(call.from_user.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫!', reply_markup=nav.BackToProfile)

		except Exception as _ex:
			print('[INFO]', _ex)


	elif call.data == 'showMainMenu':

		user_status = await db.get_user_status(call.from_user.id)

		await bot.delete_message(call.from_user.id, call.message.message_id)

		if user_status.status == 'passenger':
			await bot.send_photo(call.from_user.id, photo = open('imgs/menu.jpg', 'rb'), caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=nav.mainMenu)
		if user_status.status == 'driver':
			await bot.send_photo(call.from_user.id, photo = open('imgs/menu.jpg', 'rb'), caption=f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=nav.mainMenuForDrivers)

	elif call.data == 'showOtherStatuses':

		await bot.delete_message(call.from_user.id, call.message.message_id)
		user_status = await db.get_user_status(call.from_user.id)
		if user_status.status == 'passenger':
			await bot.send_message(call.from_user.id, f"‚ùóÔ∏è –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞—è–≤–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {md.bold('–ø–∞—Å—Å–∞–∂–∏—Ä')}", reply_markup=nav.identityChange)
		elif user_status.status == 'driver':
			await bot.send_message(call.from_user.id, f"‚ùóÔ∏è –í–∞—à–∞ —Å—Ç–∞—Ä–∞—è –∑–∞—è–≤–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {md.bold('–≤–æ–¥–∏—Ç–µ–ª—å')}", reply_markup=nav.identityChange)

	elif call.data == 'showAllSubs':
		await bot.delete_message(call.from_user.id, call.message.message_id)
		items = await db.show_items()
		all_items_menu = await nav.create_items_menu()

		if len(items) == 1:
			await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω {md.bold(len(items))} —Ç–æ–≤–∞—Ä', reply_markup=all_items_menu[1])
		elif len(items) > 1 and len(items) < 5:
			await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ {md.bold(len(items))} —Ç–æ–≤–∞—Ä–∞', reply_markup=all_items_menu[1])
		elif len(items) > 5:
			await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ {md.bold(len(items))} —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=all_items_menu[1])
		else:
			all_items_menu.add(nav.btnBack)
			await bot.send_message(call.from_user.id, f'–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç', reply_markup=all_items_menu[1])

async def change_status(call: types.CallbackQuery):
	if call.data == 'changePassenger':

		await bot.delete_message(call.from_user.id, call.message.message_id)

		update_status = await db.update_status(call.from_user.id, 'passenger')

		await bot.send_message(call.from_user.id, f"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {md.bold('–ø–∞—Å—Å–∞–∂–∏—Ä')}!")

	elif call.data == 'changeDriver':

		await bot.delete_message(call.from_user.id, call.message.message_id)

		update_status = await db.update_status(call.from_user.id, 'driver')

		await bot.send_message(call.from_user.id, f"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {md.bold('–≤–æ–¥–∏—Ç–µ–ª—å')}!")


# @dp.message_handler(state='*', commands='cancel')
async def command_cancel(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

	    current_state = await state.get_state()
	    if current_state is None:
	        return

	    logging.info('Cancelling state %r', current_state)

	    await state.finish()

	    await message.reply('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())


async def set_departure(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

	    await state.update_data(departure=message.text)

	    await Form.next()
	    await message.reply("üè† –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")


# @dp.message_handler(state=Form.destination)
async def set_arrival(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

	    await state.update_data(arrival=message.text)

	    await Form.next()
	    check_user = await db.get_user_status(message.from_user.id)

	    if check_user.status == 'passenger':
	    	await message.reply("üë• –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫")
	    elif check_user.status == 'driver':
	    	await message.reply("üë• –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –≤—ã –≥–æ—Ç–æ–≤—ã –≤–∑—è—Ç—å?")


# @dp.message_handler(state=Form.relation)
async def set_people(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

	    await state.update_data(people=message.text)

	    await Form.next()
	    await message.reply("‚òéÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç")


async def set_relation(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

	    await state.update_data(relation=message.text)

	    await Form.next()

	    await message.reply("üìÜ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (–¥–¥.–º–º.–≥–≥):")


async def set_date(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

		try:
			date_bd = datetime.strptime(message.text, "%d.%m.%y")

			await state.update_data(date=message.text)

			await Form.next()

			check_user = await db.get_user_status(message.from_user.id)

			if check_user.status == 'passenger':
				await message.reply("‚è± –£–∫–∞–∂–∏—Ç–µ –∫ —Å–∫–æ–ª—å–∫–∏ –≤–∞–º –Ω–∞–¥–æ –±—ã—Ç—å –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (XX:XX):")
			elif check_user.status == 'driver':
				await message.reply("‚è± –£–∫–∞–∂–∏—Ç–µ –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–µ—Ö–∞—Ç—å (XX:XX):")
		except Exception as _ex:
			return await bot.send_message(message.from_user.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {_ex}')


# @dp.message_handler(state=Form.date)
async def set_time(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':

		try:
			time_bd = datetime.strptime(message.text, "%H:%M")

			await state.update_data(time=message.text)

			await Form.next()
			async with state.proxy() as data:
				await bot.send_message(message.from_user.id, md.text(
					f'‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É‚ùóÔ∏è\n\n1Ô∏è‚É£ –ü–æ–µ–∑–¥–∫–∞:   {data["departure"]} - {data["arrival"]}\n\n2Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:   {data["people"]}\n\n3Ô∏è‚É£ –°–≤—è–∑—å:   {data["relation"]}\n\n4Ô∏è‚É£ –î–∞—Ç–∞:   {data["date"]}\n\n5Ô∏è‚É£ –í—Ä–µ–º—è:   {data["time"]}'), reply_markup=nav.confirmation)
			
		except Exception as _ex:
			return await bot.send_message(message.from_user.id, f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç {_ex}')


# @dp.message_handler(state=Form.response)
async def save_data(message: types.Message, state: FSMContext):
	if message.chat.type == 'private':
		async with state.proxy() as data:
			data['response'] = message.text
			if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ':

				departure_bd = data['departure']
				arrival_bd = data['arrival']
				people_bd = int(data['people'])
				relation_bd = data['relation']
				date_bd = data['date']
				time_bd = data['time']

				date_bd = datetime.strptime(date_bd, "%d.%m.%y")
				time_bd = datetime.strptime(time_bd, "%H:%M")

				try:

					user_status = await db.get_user_status(message.from_user.id)
					await db.add_new_application(message.from_user.id, departure_bd, arrival_bd, people_bd, relation_bd, date_bd, time_bd, user_status.status)

					await bot.send_message(message.from_user.id, '‚úÖ –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!', reply_markup = nav.mainKeyboardMenu)


				except Exception as _ex:
					print('[INFO] Error while working with PostgreSQL', _ex)

			else:
				current_state = await state.get_state()
				if current_state is None:
					return

				await bot.send_message(message.from_user.id, 'üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.', reply_markup = nav.mainKeyboardMenu)
		await state.finish()

async def application_menu(call: types.CallbackQuery):

	await bot.delete_message(call.from_user.id, call.message.message_id)

	if call.data == 'btnBackToProfile':
		user_status = await db.get_user_status(call.from_user.id)

		await bot.send_photo(call.from_user.id, photo = open('imgs/info.jpg', 'rb'), caption=f"üÜî {md.bold('–í–∞—à id:')} {call.from_user.id}\n\nüßëüèª‚Äçüîß {md.bold('–í–∞—à –ª–æ–≥–∏–Ω:')} {md.code(call.from_user.username)}\n\nüìñ {md.bold('–í–∞—à —Å—Ç–∞—Ç—É—Å:')} {user_status.status}\n\nüîñ {md.bold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:')} {active_req}", reply_markup=nav.profile)

	elif call.data == 'btnDeleteApplication':

		try:

			user_status = await db.get_user_status(call.from_user.id)
			delete_application = await db.delete_application(call.from_user.id, user_status.status)

			await bot.send_message(call.from_user.id, '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞', reply_markup = nav.mainKeyboardMenu)

			await bot.send_photo(call.from_user.id, photo = open('imgs/info.jpg', 'rb'), caption=f"üÜî {md.bold('–í–∞—à id:')} {call.from_user.id}\n\nüßëüèª‚Äçüîß {md.bold('–í–∞—à –ª–æ–≥–∏–Ω:')} {md.code(call.from_user.username)}\n\nüìñ {md.bold('–í–∞—à —Å—Ç–∞—Ç—É—Å:')} {user_status.status}\n\nüîñ {md.bold('–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:')} {active_req}", reply_markup=nav.profile)

		except Exception as _ex:

			print('[INFO]', _ex)
			await bot.send_message(call.from_user.id, '‚ùå –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å @w4xdwhyduwy)', reply_markup = nav.mainKeyboardMenu)

	else:
		pass

async def show_subscription(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
	items = await db.show_items()

	item_id = int(callback_data.get("item_id"))

	item = await database.Item.get(item_id)

	await call.message.edit_text(f'{md.bold("ID —Ç–æ–≤–∞—Ä–∞")}:  {item_id}\n\n{md.bold(item.quantity)} –∑–∞—è–≤–æ–∫  -  {md.code(item.price)} —Ä—É–±', reply_markup=nav.itemPurchase)
	async with state.proxy() as data:
		data['item_id'] = item_id

async def item_menu(call: types.CallbackQuery, state: FSMContext):
	if call.data == 'ItemUserBack':
		await bot.delete_message(call.from_user.id, call.message.message_id)
		items = await db.show_items()
		all_items_menu = await nav.create_items_menu()

		if len(items) == 1:
			await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω {md.bold(len(items))} —Ç–æ–≤–∞—Ä', reply_markup=all_items_menu[1])
		elif len(items) > 1 and len(items) < 5:
			await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ {md.bold(len(items))} —Ç–æ–≤–∞—Ä–∞', reply_markup=all_items_menu[1])
		elif len(items) > 5:
			await bot.send_message(call.from_user.id, f'–ù–∞–π–¥–µ–Ω–æ {md.bold(len(items))} —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=all_items_menu[1])
		else:
			all_items_menu.add(nav.btnBack)
			await bot.send_message(call.from_user.id, f'–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç', reply_markup=all_items_menu[1])

	elif call.data == 'ItemUserBuy':
		async with state.proxy() as data:
			item_id = data['item_id']
			item = await database.Item.get(item_id)

			purchase=database.Purchase(
				buyer=call.from_user.id,
            	item_id=item_id,
            	amount=item.price,
            	purchase_time=datetime.now(),
            	successful=False
            	)

		qwe = await purchase.create()

		# await call.message.edit_text(f'buyer - {call.from_user.id}\n\nitem id - {item_id}\n\namount - {item.price}\n\npurchase time - {datetime.now()}')

		currency = "RUB"
		need_name = False
		need_phone_number = False
		need_email = False
		need_shipping_address = False
		await bot.delete_message(call.from_user.id, call.message.message_id)
		await bot.send_invoice(chat_id=call.from_user.id,
                           title=item.quantity,
                           description=item.quantity,
                           payload=str(purchase.id),
                           start_parameter=str(purchase.id),
                           currency=currency,
                           prices=[
                               types.LabeledPrice(label=item.quantity, amount=item.price * 100)
                           ],
                           provider_token=pay_token,
                           need_name=need_name,
                           need_phone_number=need_phone_number,
                           need_email=need_email,
                           need_shipping_address=need_shipping_address
                           )

		await state.update_data(purchase=purchase)

async def checkout(query: types.PreCheckoutQuery, state: FSMContext):
    await bot.answer_pre_checkout_query(query.id, True)


async def successful_payment(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        purchase = data['purchase']

    item_id = purchase.item_id
    item = await database.Item.get(item_id)

    set_sub = await database.Subscriptions.query.where(database.Subscriptions.user_id == message.from_user.id).gino.first()
    await set_sub.update(amount=set_sub.amount+item.quantity).apply()

    await purchase.update(
		successful=True
		).apply()
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É")
    # else:
    #     await bot.send_message(query.from_user.id, ("–ü–æ–∫—É–ø–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."))

def register_handlers_client(dp:Dispatcher):
	dp.register_callback_query_handler(set_status, text_contains='set')
	dp.register_message_handler(buttons)
	dp.register_message_handler(command_cancel, state='*', commands='–æ—Ç–º–µ–Ω–∞')
	dp.register_callback_query_handler(main_menu, text_contains='send')
	dp.register_callback_query_handler(command_accept, text_contains='app', state=Applications.waiting_for_respons)
	dp.register_callback_query_handler(show_subscription, nav.buy_item.filter())
	dp.register_callback_query_handler(item_menu, text_contains='ItemUser')
	dp.register_pre_checkout_query_handler(checkout)
	dp.register_message_handler(successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT)
	dp.register_callback_query_handler(profile_operations, text_contains='show')
	dp.register_callback_query_handler(change_status, text_contains='change')
	dp.register_message_handler(set_departure, state=Form.departure)
	dp.register_message_handler(set_arrival, state=Form.arrival)
	dp.register_message_handler(set_people, state=Form.people)
	dp.register_message_handler(set_relation, state=Form.relation)
	# dp.register_message_handler(process_date_invalid, state=Form.date) #lambda message: not message.text.isdigit()
	dp.register_message_handler(set_date, state=Form.date)
	dp.register_message_handler(set_time, state=Form.time)
	dp.register_message_handler(save_data, state=Form.response)
	dp.register_callback_query_handler(application_menu, text_contains='btn')